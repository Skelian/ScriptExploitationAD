# Install-Module VMware.PowerCLI -AllowClobber

#####################################
### CrÃ©er et fermer une connexion ###
#####################################
#Le fqdn du serveur Vsphere
$srvName="sv-fqdn"
#Forcer le certificat invalide 
Set-PowerCLIConfiguration -Scope User -InvalidCertificateAction Warn
# Set-PowerCLIConfiguration -Scope User -ParticipateInCeip $false
# Connexion, délai assez long
Connect-VIServer -Server $srvName

#instruction ici

# Définir la période d'analyse (dernier mois)
$startTime = (Get-Date).AddMonths(-1)
$endTime = Get-Date

# Initialiser un tableau pour stocker les résultats
$results = @()

foreach ($vm in Get-Datacenter "DCName" | Get-VM | Where-Object PowerState -eq 'PoweredOn') {
    Write-Host "Analyse de la VM : $($vm.Name)"
    
    # Récupérer les statistiques CPU et mémoire
    $cpuUsage = Get-Stat -Entity $vm -Stat cpu.usage.average -Start $startTime -Finish $endTime
    $cpuUsageMhz = Get-Stat -Entity $vm -Stat cpu.usagemhz.average -Start $startTime -Finish $endTime
    $memUsage = Get-Stat -Entity $vm -Stat mem.usage.average -Start $startTime -Finish $endTime
    
    # Calculer les moyennes
    $cpuAverage = ($cpuUsage | Measure-Object -Property Value -Average).Average
    $cpuMhzAverage = ($cpuUsageMhz | Measure-Object -Property Value -Average).Average
    $memAverage = ($memUsage | Measure-Object -Property Value -Average).Average

    # Récupérer les ressources allouées
    $allocatedCpu = $vm.NumCpu
    $allocatedCpuMhz = $vm.ExtensionData.Config.Hardware.CpuAllocation.Limit
    if (-not $allocatedCpuMhz) {
        # Si aucune limite n'est configurée, utiliser la fréquence CPU de l'hôte
        $vmHost = $vm | Get-VMHost
        $hostCpuMhz = $vmHost.CpuTotalMhz / $vmHost.NumCpu
        $allocatedCpuMhz = $allocatedCpu * $hostCpuMhz
    }
    $allocatedMemoryMb = $vm.MemoryMB

    # Calculer les pourcentages d'utilisation
    $cpuUtilizationPercentage = ($cpuMhzAverage / $allocatedCpuMhz) * 100
    $memoryUtilizationPercentage = $memAverage

    # Déterminer si la VM est surdimensionnée ou sous-dimensionnée
    $cpuStatus = if ($cpuUtilizationPercentage -lt 50) { "Surdimensionnée" } elseif ($cpuUtilizationPercentage -gt 90) { "Sous-dimensionnée" } else { "Correctement dimensionnée" }
    $memStatus = if ($memoryUtilizationPercentage -lt 50) { "Surdimensionnée" } elseif ($memoryUtilizationPercentage -gt 90) { "Sous-dimensionnée" } else { "Correctement dimensionnée" }

    # Ajouter les résultats au tableau
    $results += [PSCustomObject]@{
        VMName                    = $vm.Name
        AllocatedCPU              = $allocatedCpu
        AllocatedCPU_MHz          = $allocatedCpuMhz
        AverageCPU_MHz            = $cpuMhzAverage
        CPU_UtilizationPercentage = [math]::Round($cpuUtilizationPercentage, 2)
        CPU_Status                = $cpuStatus
        AllocatedMemory_MB        = $allocatedMemoryMb
        AverageMemory_Percentage  = [math]::Round($memAverage, 2)
        Memory_Status             = $memStatus
    }
}

# Afficher les résultats
$results | Format-Table -AutoSize

# Exporter les résultats dans un fichier CSV
$results | Export-Csv -Path "VM_Dimensionnement.csv" -NoTypeInformation -Encoding UTF8

Write-Host "Analyse terminée. Les résultats sont exportés dans 'VM_Dimensionnement.csv'"

# Deconnexion
Disconnect-VIServer -Force 
